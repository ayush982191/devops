name: Node.js CI/CD for AWS ECS

on:
  push:
    branches: ["**"] # Trigger on push to any branch
  pull_request:
    branches: ["main"] # Trigger on pull requests to main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm ci
        working-directory: cicd 

      - run: npm run build --if-present
        working-directory: cicd 

      - run: npm test
        working-directory: cicd 

      # Docker-related step
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 905418282509.dkr.ecr.us-east-1.amazonaws.com

      - name: Build and push Docker image to ECR
        run: |
          docker build -t demo-app ./cicd  # Build the Docker image from cicd directory
          docker tag demo-app:latest 905418282509.dkr.ecr.us-east-1.amazonaws.com/demo-app:latest  # Tag the image
          docker push 905418282509.dkr.ecr.us-east-1.amazonaws.com/demo-app:latest  # Push to ECR

      - name: Register Task Definition with ECS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          echo "Registering task definition..."
          TASK_DEFINITION=$(cat <<EOF
          {
            "family": "demo-app-task",
            "containerDefinitions": [
              {
                "name": "demo-app-container",
                "image": "905418282509.dkr.ecr.us-east-1.amazonaws.com/demo-app:latest",
                "essential": true,
                "memory": 512,
                "cpu": 256,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80
                  }
                ]
              }
            ]
          }
          EOF
          )
          echo "$TASK_DEFINITION" > taskdef.json
          aws ecs register-task-definition --cli-input-json file://taskdef.json

      - name: Deploy to ECS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          echo "Deploying to ECS..."
          aws ecs update-service --cluster demo-app-cluster --service demo-app-service --force-new-deployment || \
          aws ecs create-service \
            --cluster demo-app-cluster \
            --service-name demo-app-service \
            --task-definition demo-app-task \
            --desired-count 1 \
            --launch-type EC2 \
            --deployment-configuration maximumPercent=200,minimumHealthyPercent=100 \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-xxxxxxxx],securityGroups=[sg-xxxxxxxx],assignPublicIp=ENABLED}"
